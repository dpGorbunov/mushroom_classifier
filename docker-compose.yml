services:
  app:
    build: ./app
    container_name: ml_app
    env_file:
      - .env
    volumes:
      - ./app:/app
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  web-proxy:
    image: nginx:latest
    container_name: nginx_proxy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app-network
    restart: always

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    restart: on-failure
    networks:
      - app-network


  database:
    image: postgres:15
    container_name: postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  worker:
    build:
      context: ./app
      dockerfile: Dockerfile.worker
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    volumes:
      - ./app:/app
    depends_on:
      - rabbitmq
      - database
    deploy:
      replicas: 2
    networks:
      - app-network
    restart: always


volumes:
  postgres_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge